# ArgodeDebugManager.gd
extends RefCounted

class_name ArgodeDebugManager

## 🚨 簡素化されたデバッグマネージャー
## 無限再帰問題を解決するため、複雑な機能を削除してシンプルな実装に変更

# ログレベル定数（後方互換性のため）
enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARNING = 2,
    ERROR = 3,
    NONE = 4
}

# GitHub Copilot効率化ログレベル
enum CopilotLogLevel {
    DEBUG = 0,      # 🔍 詳細デバッグ情報
    WORKFLOW = 1,   # 🎬 ワークフロー重要ポイント
    CRITICAL = 2    # 🚨 重大問題のみ
}

# 現在のログレベル
var current_log_level: int = LogLevel.INFO
var copilot_log_level: int = CopilotLogLevel.WORKFLOW

func _init():
    if OS.is_debug_build():
        current_log_level = LogLevel.INFO
        copilot_log_level = CopilotLogLevel.WORKFLOW

# =============================================================================
# GitHub Copilot効率化ログAPI（シンプル実装）
# =============================================================================

## 🚨 CRITICAL: エラー・重大問題（GitHub Copilot最重要）
func log_critical(message: String) -> void:
    if copilot_log_level <= CopilotLogLevel.CRITICAL:
        print("💬 CRITICAL : 🚨 " + message)

## 🎬 WORKFLOW: ワークフロー重要ポイント（実行フロー把握用）
func log_workflow(message: String) -> void:
    if copilot_log_level <= CopilotLogLevel.WORKFLOW:
        print("💬 WORKFLOW : 🎬 " + message)

## 🔍 DEBUG: 詳細情報（開発時のみ）
func log_debug_detail(message: String) -> void:
    if copilot_log_level <= CopilotLogLevel.DEBUG:
        print("💬 DEBUG : 🔍 " + message)

## GitHub Copilot用ログレベル設定
func set_copilot_log_level(level: int) -> void:
    copilot_log_level = level

# =============================================================================
# 従来のログメソッド（後方互換性維持）
# =============================================================================

func log(message: String, level: int = LogLevel.INFO):
    if current_log_level == LogLevel.NONE:
        return
    
    if level >= current_log_level:
        var level_str = ""
        match level:
            LogLevel.DEBUG:
                level_str = "💬 DEBUG : "
            LogLevel.INFO:
                level_str = "💬 INFO : "
            LogLevel.WARNING:
                level_str = "💬 WARNING : "
            LogLevel.ERROR:
                level_str = "💬 ERROR : "
        
        print(level_str + message)

## ログレベルを設定
func set_log_level(level: int):
    current_log_level = level

## エラーログ（個別メソッド）
func log_error(message: String):
    if current_log_level <= LogLevel.ERROR:
        print("💬 ERROR : " + message)

## 警告ログ（個別メソッド）
func log_warning(message: String):
    if current_log_level <= LogLevel.WARNING:
        print("💬 WARNING : " + message)

## 情報ログ（個別メソッド）
func log_info(message: String):
    if current_log_level <= LogLevel.INFO:
        print("💬 INFO : " + message)

## デバッグログ（個別メソッド）
func log_debug(message: String):
    if current_log_level <= LogLevel.DEBUG:
        print("💬 DEBUG : " + message)
