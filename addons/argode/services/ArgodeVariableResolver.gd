extends RefCounted
class_name ArgodeVariableResolver

## Â§âÊï∞Ëß£Ê±∫„ÅÆÁµ±‰∏Ä„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
## Â§âÊï∞Ëß£Ê±∫„ÄÅÂºèË©ï‰æ°„ÄÅ„ÉÜ„Ç≠„Çπ„ÉàÂÜÖÂ§âÊï∞Â±ïÈñã„Çí‰∏ÄÂÖÉÂåñ

var variable_manager: ArgodeVariableManager

func _init(var_manager: ArgodeVariableManager = null):
	variable_manager = var_manager

## Â§âÊï∞„Éû„Éç„Éº„Ç∏„É£„Éº„ÇíË®≠ÂÆö
func set_variable_manager(var_manager: ArgodeVariableManager) -> void:
	variable_manager = var_manager

## „ÉÜ„Ç≠„Çπ„ÉàÂÜÖ„ÅÆÂ§âÊï∞„ÇíËß£Ê±∫Ôºà[variable]ÂΩ¢Âºè„ÅÆÁΩÆÊèõÔºâ
func resolve_text(text: String) -> String:
	if not variable_manager:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: VariableManager not set", 1)
		return text
	
	var resolved_text = text
	var pattern = RegEx.new()
	pattern.compile("\\[([^\\]]+)\\]")  # [variable_name]„ÅÆ„Éë„Çø„Éº„É≥
	
	var results = pattern.search_all(resolved_text)
	
	# Âæå„Çç„Åã„ÇâÂá¶ÁêÜ„Åó„Å¶‰ΩçÁΩÆ„ÅÆ„Åö„Çå„ÇíÂõûÈÅø
	for i in range(results.size() - 1, -1, -1):
		var result = results[i]
		var variable_name = result.get_string(1)
		var variable_value = _get_variable_value(variable_name)
		
		# ÁΩÆÊèõÂÆüË°å
		resolved_text = resolved_text.substr(0, result.get_start()) + variable_value + resolved_text.substr(result.get_end())
	
	return resolved_text

## Â§âÊï∞„ÇíË®≠ÂÆö
func set_variable(variable_name: String, value: Variant) -> void:
	if not variable_manager:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: VariableManager not set", 1)
		return
	
	variable_manager.set_variable(variable_name, value)

## Âºè„ÇíË©ï‰æ°Ôºàset playerName = value, player.affection += 10Á≠âÔºâ
func evaluate_expression(expression: String, target_variable: String = "") -> Variant:
	ArgodeSystem.log("üîç VariableResolver.evaluate_expression: expression='%s', target='%s'" % [expression, target_variable])
	
	if not variable_manager:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: VariableManager not set", 1)
		return null
	
	var cleaned_expr = expression.strip_edges()
	ArgodeSystem.log("üîç VariableResolver: cleaned expression='%s'" % cleaned_expr)
	
	# ‰ª£ÂÖ•ÊºîÁÆóÂ≠ê„ÇíÊ§úÂá∫
	if "+=" in cleaned_expr:
		return _evaluate_arithmetic_assignment(cleaned_expr, target_variable, "+=")
	elif "-=" in cleaned_expr:
		return _evaluate_arithmetic_assignment(cleaned_expr, target_variable, "-=")
	elif "*=" in cleaned_expr:
		return _evaluate_arithmetic_assignment(cleaned_expr, target_variable, "*=")
	elif "/=" in cleaned_expr:
		return _evaluate_arithmetic_assignment(cleaned_expr, target_variable, "/=")
	elif "=" in cleaned_expr:
		return _evaluate_simple_assignment(cleaned_expr, target_variable)
	else:
		# ÂçòÁ¥î„Å™ÂÄ§„Å®„Åó„Å¶Âá¶ÁêÜÔºàExpression„ÇØ„É©„Çπ„ÅØ‰Ωø„Çè„Å™„ÅÑÔºâ
		return _process_value(cleaned_expr)

## Â§âÊï∞ÂÄ§„ÇíÂèñÂæóÔºàÂÜÖÈÉ®Âá¶ÁêÜÔºâ
func _get_variable_value(variable_name: String) -> String:
	var value = variable_manager.get_variable(variable_name)
	
	if value != null:
		return str(value)
	else:
		# Êú™ÂÆöÁæ©Â§âÊï∞„ÅÆÂá¶ÁêÜ
		if ArgodeSystem.DebugManager and ArgodeSystem.DebugManager.is_debug_mode():
			return "[UNDEFINED:%s]" % variable_name
		else:
			return ""  # „É™„É™„Éº„ÇπÊôÇ„ÅØÁ©∫ÊñáÂ≠ó

## ÂçòÁ¥î‰ª£ÂÖ•„ÅÆË©ï‰æ°Ôºàvariable = valueÔºâ
func _evaluate_simple_assignment(expression: String, target_variable: String) -> Variant:
	ArgodeSystem.log("üîç VariableResolver._evaluate_simple_assignment: expression='%s', target='%s'" % [expression, target_variable])
	
	var parts = expression.split("=", false, 1)
	ArgodeSystem.log("üîç VariableResolver: split parts=%s" % str(parts))
	
	if parts.size() != 2:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: Invalid assignment expression: %s" % expression, 1)
		return null
	
	var var_name = target_variable if not target_variable.is_empty() else parts[0].strip_edges()
	var value_part = parts[1].strip_edges()
	
	ArgodeSystem.log("üîç VariableResolver: var_name='%s', value_part='%s'" % [var_name, value_part])
	
	# ÂÄ§„ÇíË©ï‰æ°
	var processed_value = _process_value(value_part)
	ArgodeSystem.log("üîç VariableResolver: processed_value=%s" % str(processed_value))
	
	variable_manager.set_variable(var_name, processed_value)
	
	return processed_value

## ÁÆóË°ì‰ª£ÂÖ•„ÅÆË©ï‰æ°Ôºàvariable += valueÁ≠âÔºâ
func _evaluate_arithmetic_assignment(expression: String, target_variable: String, operator: String) -> Variant:
	var parts = expression.split(operator, false, 1)
	if parts.size() != 2:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: Invalid arithmetic expression: %s" % expression, 1)
		return null
	
	var var_name = target_variable if not target_variable.is_empty() else parts[0].strip_edges()
	var value_part = parts[1].strip_edges()
	
	# ÁèæÂú®„ÅÆÂÄ§„ÇíÂèñÂæó
	var current_value = variable_manager.get_variable(var_name)
	if current_value == null:
		current_value = 0  # „Éá„Éï„Ç©„É´„ÉàÂÄ§
	
	# ÊºîÁÆóÂÄ§„ÇíÂá¶ÁêÜ
	var operand = _process_value(value_part)
	
	# ÁÆóË°ìÊºîÁÆóÂÆüË°å
	var result
	match operator:
		"+=":
			result = current_value + operand
		"-=":
			result = current_value - operand
		"*=":
			result = current_value * operand
		"/=":
			result = current_value / operand if operand != 0 else current_value
		_:
			result = current_value
	
	variable_manager.set_variable(var_name, result)
	return result

## Âºè„Å®„Åó„Å¶Ë©ï‰æ°ÔºàExpression„ÇØ„É©„Çπ‰ΩøÁî®Ôºâ
func _evaluate_as_expression(expression: String) -> Variant:
	var expr = Expression.new()
	var error = expr.parse(expression)
	
	if error != OK:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: Expression parse error: %s" % expression, 1)
		return null
	
	# self„ÇíÊòéÁ§∫ÁöÑ„Å´Ê∏°„Åó„Å¶ÂÆüË°å
	var result = expr.execute([], self)
	if expr.has_execute_failed():
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: Expression execution error: %s" % expression, 1)
		return null
	
	return result

## ÂÄ§„ÇíÂá¶ÁêÜÔºàÊñáÂ≠óÂàó„ÄÅÊï∞ÂÄ§„ÄÅÂ§âÊï∞ÂèÇÁÖßÁ≠âÔºâ
func _process_value(value_string: String) -> Variant:
	if value_string.is_empty():
		return ""
	
	var cleaned = value_string.strip_edges()
	
	# Êï∞ÂÄ§„ÅÆÂ†¥Âêà
	if cleaned.is_valid_int():
		return cleaned.to_int()
	elif cleaned.is_valid_float():
		return cleaned.to_float()
	
	# boolean „ÅÆÂ†¥Âêà
	if cleaned.to_lower() == "true":
		return true
	elif cleaned.to_lower() == "false":
		return false
	
	# Â§âÊï∞ÂèÇÁÖß„ÅÆÂ†¥ÂêàÔºà[variable]Ôºâ
	if cleaned.begins_with("[") and cleaned.ends_with("]"):
		var var_name = cleaned.substr(1, cleaned.length() - 2)
		return variable_manager.get_variable(var_name)
	
	# ÊñáÂ≠óÂàó„Å®„Åó„Å¶Êâ±„ÅÜ
	return cleaned

## Â§âÊï∞„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
func has_variable(variable_name: String) -> bool:
	if not variable_manager:
		return false
	return variable_manager.has_variable(variable_name)

## „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Âá∫Âäõ
func debug_print_variables() -> void:
	if variable_manager:
		variable_manager.debug_print_variables()
	else:
		ArgodeSystem.log("‚ö†Ô∏è VariableResolver: VariableManager not set", 1)
